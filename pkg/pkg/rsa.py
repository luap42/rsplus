import primes, maths, random, keyring

def makeYourKey(l=256):
    p = q = 0
    while p == 0 and q == 0:
        try:
            p,q  = primes.getPrime(l), primes.getPrime(l)
        except: pass
    N = p*q
    phiN = (p-1)*(q-1)
    e = phiN // 2 + 1
    while e == maths.modinv(e, phiN) or maths.gcd(e, phiN) != 1:
        e += 1
    d = maths.modinv(e, phiN)
    return {'pub': e, 'N': N, 'pri': d}

def encrypt(msg, kp):
    N = kp['N']
    e = kp['pub']
    msg = str(msg)
    nmsg = [str(ord(i)) for i in msg]
    nmsgl = max([len(i) for i in nmsg])
    nmsg = int(''.join([i.zfill(nmsgl) for i in nmsg]))

    result = str(nmsgl) + ":" + str(pow(nmsg, e, N))
    return result

def decrypt(cip, kp):
    N = kp['N']
    d = kp['pri']

    if not ":" in cip:
        return False
    bl, cip = cip.split(":")
    bl = int(bl)

    result = str(pow(int(cip), d, N))
    if len(result) % bl != 0:
        fill = len(result) + (bl - len(result) % bl)
        result = result.zfill(fill)
    result = [result[i:i+bl] for i in range(0, len(result), bl)]
    result = ''.join([chr(int(i)) for i in result])
    return result

"""x = makeYourKey(1024)
c = encrypt("Guten Tag, dies ist ein längerer Text. Er soll demonstrieren, dass die RSA-Ver und Entschlüsselung auch bei längeren Texten mit Sonderzeichen funktioniert. Der Strich über dem Í ist daher beabsichtigt.", x)
m = decrypt(c, x)

KEY = {'pri': 3818845080549742970863974283747915811380809366685051086923009080209305928277140272471029749900613237433630848431351292571162678343104782941553929294688137634923430364060733810641745322874448997615607891029415282867920620015939293733700367708032847720414504784461762331828304957162074096157004790112614463828800238191053756921254027538458330308886677668503585449538984238034287396943376466716359714148664101188751755654974014581086782296594493025427546845848579402508235689475579723998186743507182676062357057723966525125391512560566960043646899773430187122123597617950640033082801268593584966699148574443355397719553, 'N': 22913070483298457825183845702487494868284856200110306521538054481255835569662841634826178499403679424601785090588107755426976070058628697649323575768128825809540582184364402863850471937246693985693647346176491697207523720095635762402202206248197086322487028706770573990969829742972444576942028740675686782973106641807007031005234543544267628411341862125756371457261498807186356007719950771687517335991945812867273236294279656985766435367972616090270496541253062026214918658129064585241325582023508124553475682643953721374022765292853605531741533726156284352625237915520144114478402967520554400531773028000588222251009, 'pub': 11456535241649228912591922851243747434142428100055153260769027240627917784831420817413089249701839712300892545294053877713488035029314348824661787884064412904770291092182201431925235968623346992846823673088245848603761860047817881201101103124098543161243514353385286995484914871486222288471014370337843391486400714573161270763762082615374990926660033005510756348616952714102862190830129400149079142445992303566255266964922043743260346889783479076282640537545738207524707068426739171994560230521548028187071173171899575376174537681700880130940699320290561366370792853851920099248403805780754900097445723330066193158661}
"""
